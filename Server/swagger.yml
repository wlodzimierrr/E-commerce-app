swagger: "2.0"
info:
  description: "E-commerce REST API"
  version: "1.0.0"
  title: "E-commerce REST API"
schemes: 
  - http
host: localhost:5000
basePath: "/api"
paths:
  /auth/register:
    post:
      summary: "Register a new user"
      description: "Register a new user"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object that needs to be added to the store
          required: true
          schema:
            type: object
            required:
              - username
              - email
              - password
              - firstname
              - lastname
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
              firstname:
                type: string
              lastname:
                type: string
      responses:
        200:
          description: 200 Success
          schema:
            type: object
            properties:
              message:
                type: string
        409:
          description: 409 Conflict
          schema:
            type: object
            properties:
              error:
                type: string
        500:
          description: 500 Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string

  /auth/login:
    post:
      summary: "Login to a user account"
      description: "Login to a user account"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: User's login credentials
          required: true
          schema:
            type: object
            required:
              - username or email
              - password
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: 200 Success
          schema:
            type: object
            properties:
              token:
                type: string
        401:
          description: 401 Unauthorized
          schema:
            type: object
            properties:
              error:
                type: string
        500:
          description: 500 Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string

  /users/{userId}:
    get:
      summary: "Get user record"
      description: "Get user record by user ID"
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string
          description: The user ID
      responses:
        200:
          description: 200 Success
          schema:
            type: object
            properties:
              userId:
                type: string
              email:
                type: string
        500:
          description: 500 Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string
    put:
      summary: "Update user record"
      description: "Update an existing user's information"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string
          description: "The user ID that needs to be updated"
        - in: body
          name: userUpdate
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
              firstname:
                type: string
              lastname:
                type: string
      responses:
        200:
          description: "User updated successfully"
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: "Internal Server Error"
          schema:
            type: object
            properties:
              error:
                type: string

  /products/:
    get:
      summary: "List all products"
      description: "Returns a list of all products."
      produces:
        - application/json
      responses:
        200:
          description: "A list of all products"
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'

  /products/{ProductId}:
    get:
      summary: "Get a single product"
      description: "Fetches details of a specific product by ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: ProductId
          required: true
          type: string
          description: "The ID of the product to retrieve."
      responses:
        200:
          description: "Details of the specified product."
          schema:
            $ref: '#/definitions/Product'
        404:
          description: "Product not found."
    put:
      summary: "Update product stock"
      description: "Updates the stock quantity of a specific product."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: ProductId
          required: true
          type: string
          description: "The ID of the product to update."
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              stockQuantity:
                type: integer
                description: "The new stock quantity for the product."
      responses:
        200:
          description: "Product stock updated successfully."
          schema:
            $ref: '#/definitions/Product'
        404:
          description: "Product not found."

  /orders/:
    get:
      summary: "List all orders for a user"
      description: "Fetches all orders placed by a specific user."
      produces:
        - application/json
      parameters:
        - in: query
          name: userId
          required: true
          type: string
          description: "The ID of the user whose orders to fetch."
      responses:
        200:
          description: "A list of orders placed by the user."
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'

  /orders/{orderId}:
    get:
      summary: "Get order details"
      description: "Fetches details of a specific order."
      produces:
        - application/json
      parameters:
        - in: path
          name: orderId
          required: true
          type: string
          description: "The ID of the order to retrieve."
      responses:
        200:
          description: "Details of the specified order."
          schema:
            $ref: '#/definitions/Order'
        404:
          description: "Order not found."

  /carts/cart:
    get:
      summary: "Get user's cart"
      description: "Retrieves the shopping cart for the logged-in user."
      produces:
        - application/json
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Shopping cart retrieved successfully."
          schema:
            $ref: '#/definitions/Cart'
        401:
          description: "Unauthorized if the user is not logged in."
        404:
          description: "Cart not found if the user does not have a cart."
        
securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    
definitions:
  Product:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      price:
        type: number
      stockQuantity:
        type: integer
  
  CartItem:
    type: object
    properties:
      id:
        type: string
      product:
        $ref: '#/definitions/Product'
      quantity:
        type: integer

  Cart:
    type: object
    properties:
      id:
        type: string
      items:
        type: array
        items:
          $ref: '#/definitions/CartItem'

  Order:
    type: object
    properties:
      id:
        type: string
      total_amount:
        type: number
      status:
        type: string
      items:
        type: array
        items:
          $ref: '#/definitions/Product'
